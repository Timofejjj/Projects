import csv
import requests
from bs4 import BeautifulSoup
from datasets import Dataset
import pandas as pd
from google.colab import files
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from transformers import RobertaTokenizer, RobertaForSequenceClassification, Trainer, TrainingArguments


def pars_url_and_extract_products(url, writer):

    try:
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')

        for product in soup.find_all(['p', 'span', 'li', 'h1', 'h2', 'ol','div']):
            product_text = product.get_text().strip()

            for keyword in [
    "sofa",
    "armchair",
    "chair",
    "table",
    "coffee table",
    "dining table",
    "bed",
    "nightstand",
    "dresser", "wardrobe",
    "cabinet",
    "bookshelf",
    "desk",
    "bench",
    "stool",
    "bar stool",
    "loveseat",
    "rocking chair",
    "recliner",
    "ottoman",
    "sideboard",
    "chest of drawers",
    "hutch",
    "couch",
    "sectional",
    "bunk bed",
    "daybed",
    "trundle bed",
    "headboard",
    "footboard",
    "vanity",
    "console table",
    "folding chair",
    "bean bag chair",
    "crib",
    "bassinet",
    "changing table",
    "media console",
    "entertainment center",
    "tv stand",
    "coat rack",
    "shoe rack",
    "wine rack",
    "curio cabinet",
    "china cabinet",
    "buffet table",
    "patio chair",
    "patio table",
    "outdoor sofa",
    "hammock",
    "swing chair",
    "chaise lounge",
    "futon",
    "murphy bed",
    "lap desk",
    "writing desk",
    "gaming chair",
    "massage chair",
    "kneeling chair",
    "pedestal table",
    "tallboy",
    "lowboy",
    "armoire",
    "vanity stool",
    "entryway table",
    "plant stand",
    "room divider",
    "screen",
    "tv cabinet",
    "kids' chair",
    "kids' table",
    "picnic table",
    "folding table",
    "conference table",
    "workbench",
    "drafting table",
    "laundry hamper",
    "medicine cabinet",
    "file cabinet",
    "safe",
    "locker",
    "coat closet",
    "linen closet",
    "display cabinet",
    "jewelry armoire",
    "umbrella stand"
            ]:
                if keyword in product_text.lower():
                    writer.writerow({
                        "Text": product_text,
                        "Word": keyword
                    })

    except Exception as e:
        print(f"Exception: {e}")



with open('data_mebla/URL_list.csv', 'r') as url_file, open('data_mebla/furniture.csv', mode='w', newline='', encoding='utf-8') as csv_file:

    writer = csv.DictWriter(csv_file, fieldnames=["Text", "Word"])
    writer.writeheader()
    urls = url_file.readlines()

    for url in urls:
        url = url.strip()
        pars_url_and_extract_products(url, writer)



#Solving BIO problem:

def writing_with_BIO_logic(writer, len, key_word):

    counter = 0
    splited_len = len.split()

    for i in range(len(splited_len)):

        if splited_len[i] == key_word:
            writer.writerow({
                "Word": splited_len[i],      
                "BIO_label": 'I-ENTITY'
             })
            counter = 1

            if counter > 0:
              writer.writerow({
                "Word": splited_len[i],      
                "BIO_label": 'B-ENTITY'
              })
        
        if splited_len[i] != key_word:

             writer.writeow({ 
                  "Word":splited_len[i],
                  "BIO_label": 'O-ENTITY'
              })


def learn_model():

  pass


#open writing file
with open('data_mebla/BIO_clasification.csv', mode='w', newline='', encoding='utf-8') as csv_BIO_file:

    #Main idea is: to create new special the BIO file.

    df = pd.DataFrame('csv_file')

    writer = csv.DictWriter(csv_BIO_file, fieldnames = ["Word", "BIO_label"])
    writer.writeheader()


    for i in range(len(csv_file)):
      writing_with_BIO_logic(writer, df['Text'][i], df['Word'][i])












